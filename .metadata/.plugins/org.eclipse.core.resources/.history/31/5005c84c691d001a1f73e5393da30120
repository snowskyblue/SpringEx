<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd">
           
    <http auto-config="true" use-expressions = "true">
    <!-- auto-config='true'를 설정한 것만으로 기본 로그인페이지/HTTP 기본인증/로그아웃기능 등을 제공 -->
    <!-- use-expressions = "true" 는 SpEL(Spring Express Language) 을 사용, default는 false임
    	true시에는 SpEL을 사용해서 작성해야만 에러가 발생 안함-->
    	<!-- url별로 접근 권한을 줌 , 우선순위는 위부터 아래로 권한을 줌-->
    	<intercept-url pattern="/" access="permitAll" />
    	<!-- url에 접근하기 위한 권한 pattern은 url 형태, access속성에 권한을 줌(permitAll은 모든 사람에게 접근 권한을 줌) -->
    	<intercept-url pattern="/resources/**" access="permitAll" />
		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/join_view" access="permitAll" />
		<intercept-url pattern="/join" access="permitAll" />
		<intercept-url pattern="/html/**" access="permitAll" />
		<intercept-url pattern="/style/**" access="permitAll" />
		<intercept-url pattern="/js/**" access="permitAll" />
		<intercept-url pattern="/images/**" access="permitAll" />
		<intercept-url pattern="/login_duplicate" access="permitAll" />
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
		<!-- ROLE_USER는 일반 가입자에게만 허용이고 hasRole()이 spEL
		hasRole('ROLE_ANONYMOUS')는 permitAll이고 hasRole('ROLE_ADMIN')은 관리자에게만 허용 -->
		
		<!-- form-login엘리먼트는 사용자이름과 비밀번호를 가지고 있는 폼기반 인증방법을 사용한다.
		login-page="/login" 으로 요청시 포워딩된 페이지가 로그인으로 사용하는 페이지임을 스프링에 알려줌 (자체제작 로그인 화면)
		설정 안하면 스프링 제공 로그인페이지를 사용하게 됨
		username-parameter, password-parameter는 앞으로 사용할 id와 password속성명으로 여기서 form에서 지정한
		name속성을 변경할 수 있음(작성하지 않으면 form의 name속성을 그대로 사용)
		default-target-url은 로그인이 성공했을때 이동할 페이지
		authentication-failure-url은 로그인 실패시 이동할 경로
		always-use-default-target="true"를 해야  원활히 default-target-url로 이동
		-->
		
		<form-login login-page="/login" 
					username-parameter="uid" 
					password-parameter="upw"															
					default-target-url="/mainFrame" 
					authentication-failure-url="/login?error=1"
					always-use-default-target="true"
					/>
					
		<!-- 로그아웃처리 엘리먼트
		invalidate-session="true"는 로그아웃하면 세션을 제거
		logout-url은 로그아웃 경로
		logout-success-url은 로그 아웃 성공시 이동 경로
		logout-success-url="/login?logout=1" 은 로그인 후 로그아웃했다는 것을 표시 -->
		 
		<logout invalidate-session="true" logout-url="/logout"   logout-success-url="/login?logout=1" />
		
		<csrf/> 
		<!-- csrf는 cross site request forgery는 사이트간 요청 위조로 다른페이지에서 요청을 위조해서
		공격하는 방식, csrf 해킹을 예방하기 위해 사용 -->
	</http>
	
	<!-- authentication-manager는 인증처리를 위한 최상위 엘리먼트
		authentication-provider는 인증처리하는 엘리먼트
		user-service-ref 속성은 스프링시큐리티에서 아이디로 데이터베이스에 요청한 아이디에 대해 
		사용자이름/비밀번호를  다시 스프링으로 제공해줄 서비스클래스 객체 등록 -->
	<authentication-manager>
		<authentication-provider user-service-ref="customUserDetailsService" />
		
	</authentication-manager>
	
	<!-- user-service-ref로 사용할 bean 정의 (해당 클래스를 자바 클래스로 만들어 주어야함)
	
	<beans:bean id="customUserDetailsService" class="com.kim.secProject.security.CustomUserDetailsService" /> -->
	
	
	
	   	
    
</beans:beans>
