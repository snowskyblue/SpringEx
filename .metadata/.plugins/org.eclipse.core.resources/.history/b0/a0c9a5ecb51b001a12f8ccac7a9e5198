package com.lee.springProject1.bcontroller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.lee.springProject1.bcommand.BCommand;
import com.lee.springProject1.bcommand.BWriteCommand;

@Controller
public class BController {
/*요청경로 만들기
 *list, write_view, write, content_view, modify, reply_view, reply, delete, upload, download
 *bcommand폴더에 인터페이스 BCommand를 만들고 추상 메소드는 void형이고 파라메터는 Model객체를 사용하도록
 *execute메소드를 만듦
 *bdto패키지에는 게시판 DB의 컬럼과 매핑되는 멤버변수를 갖는 BDto클래스를 만듦
 *bdao패키지에는 BDao클래스를 만듦(생성자까지만 만들되, DataSource객체를 생성하도록 함)
 */
	BCommand command = null;
	
	@RequestMapping("/list")
	public String list(Model model) {
		return "";
	}
	
	@RequestMapping("/writeView")
	public String writeView(Model model) {
		System.out.println("writeView()");
		return "writeView";
	}
	
	@RequestMapping("/write")
	public String write(HttpServletRequest request, Model model) {
		//입력된 값을 가지고 db에 처리해야하므로 입력된 값을 가지는 request객체를 사용
		model.addAttribute("request", request);
		System.out.println("write()");
		command = new BWriteCommand();
		command.execute(model);
		Map<String, Object> map = model.asMap();
		//String key, Object는 값/
		String result = (String)map.get("result");
		//return "redirect:list";
		System.out.println(result);
		return "list";
	}
	
	@RequestMapping("/contentView")
	public String contentView(Model model) {
		return "";
	}
	
	@RequestMapping("/modify")
	public String modify(Model model) {
		return "";
	}
	
	@RequestMapping("/replyView")
	public String replyView(Model model) {
		return "";
	}
	
	@RequestMapping("/reply")
	public String reply(Model model) {
		return "";
	}
	
	@RequestMapping("/delete")
	public String delete(Model model) {
		return "";
	}
	
	@RequestMapping("/upload")
	public String upload(Model model) {
		return "";
	}
	
	@RequestMapping("/download")
	public String download(Model model) {
		return "";
	}
}
