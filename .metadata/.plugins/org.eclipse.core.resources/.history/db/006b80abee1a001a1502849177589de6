package com.kim.fileupdown;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		
		return "fileUp";
	}
	
	@RequestMapping("requestupload1") //단일 파일 업로드 처리
	public String requestupload1(MultipartHttpServletRequest mtfRequest, Model model) {
		//request객체를 MultipartHttpServletRequest객체를 사용(enctype="multipart/form-data")
		String src = mtfRequest.getParameter("src");
		System.out.println("src value: " + src);
		MultipartFile mf = mtfRequest.getFile("file");
		//MultipartFile객체를 얻어냄, 이때는 getParameter(일반 input)대신 getFile() 메서드 사용
		String path = "D:/upimage/"; //업로드된 파일 저장 위치
		
		//폼에서 전달된 파일 이름
		String orginFileName = mf.getOriginalFilename();
		//업로드된 파일크기
		long fileSize = mf.getSize();
		System.out.println("originFileName: "+ orginFileName );
		System.out.println("fileSize: "+ fileSize );
		
		//저장할 파일은 이름을 바꾸어 저장(동일한 이름의 파일이 왔을때 중복을 피함,시간을 앞에 붙여 중복 피함)
		String safeFile = path + System.currentTimeMillis() + orginFileName; //pathname
		String dfile = System.currentTimeMillis() + orginFileName;
		try {
			mf.transferTo(new File(safeFile));
			 //MultipartFile객체(저장불가)를 일반 파일(저장가능) 객체로 변환
			/*Transfer the received file to the given destination file. 

This may either move the file in the filesystem, copy the file in thefilesystem, or save memory-held contents to the destination file.If the destination file already exists, it will be deleted first. 

If the file has been moved in the filesystem, this operation cannotbe invoked again. Therefore, call this method just once to be able towork with any storage mechanism.
*/
		} catch (Exception e) {
			e.printStackTrace();
		}
		model.addAttribute("author",src);
		model.addAttribute("fileName",dfile);
		model.addAttribute("fileSize",fileSize);
		return "download";
		
	}
	
	@RequestMapping("requestupload2") //다중 파일 업로드 처리
	public String requestupload2(MultipartHttpServletRequest mtfRequest, Model model) {
		
		return "download";
	}
}
